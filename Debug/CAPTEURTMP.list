
CAPTEURTMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e2c  08004e2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e34  08004e34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004eac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004eac  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d9  00000000  00000000  0002f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b86  00000000  00000000  000331f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101fe  00000000  00000000  00059d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eabaa  00000000  00000000  00069f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003534  00000000  00000000  00154b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d5c 	.word	0x08004d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004d5c 	.word	0x08004d5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a24      	ldr	r2, [pc, #144]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 ffef 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_GPIO_Init+0xc8>)
 800061e:	f000 fe37 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000622:	2320      	movs	r3, #32
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fe28 	bl	8001290 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000800 	.word	0x48000800

08000650 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f000 ffc2 	bl	8001614 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 fb36 	bl	8000d06 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f001 fdb3 	bl	8002208 <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 fb2d 	bl	8000d06 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f001 fdf5 	bl	800229e <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 fb24 	bl	8000d06 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	10909cec 	.word	0x10909cec

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ac      	sub	sp, #176	; 0xb0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2288      	movs	r2, #136	; 0x88
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 feaf 	bl	8004454 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <HAL_I2C_MspInit+0xb0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d13b      	bne.n	8000778 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000704:	2300      	movs	r3, #0
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fc77 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000718:	f000 faf5 	bl	8000d06 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	4a18      	ldr	r2, [pc, #96]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000734:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074e:	2304      	movs	r3, #4
 8000750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_I2C_MspInit+0xb8>)
 800075c:	f000 fd98 	bl	8001290 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076a:	6593      	str	r3, [r2, #88]	; 0x58
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800076e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	37b0      	adds	r7, #176	; 0xb0
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400

0800078c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	f043 030c 	orr.w	r3, r3, #12
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80007b8:	f107 0118 	add.w	r1, r7, #24
 80007bc:	230a      	movs	r3, #10
 80007be:	2202      	movs	r2, #2
 80007c0:	486c      	ldr	r0, [pc, #432]	; (8000974 <lcd_init+0x1e8>)
 80007c2:	f003 f927 	bl	8003a14 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80007c6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80007ca:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80007cc:	f107 0114 	add.w	r1, r7, #20
 80007d0:	230a      	movs	r3, #10
 80007d2:	2202      	movs	r2, #2
 80007d4:	4867      	ldr	r0, [pc, #412]	; (8000974 <lcd_init+0x1e8>)
 80007d6:	f003 f91d 	bl	8003a14 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	2205      	movs	r2, #5
 80007de:	217c      	movs	r1, #124	; 0x7c
 80007e0:	69f8      	ldr	r0, [r7, #28]
 80007e2:	f001 f991 	bl	8001b08 <HAL_I2C_IsDeviceReady>
 80007e6:	4603      	mov	r3, r0
 80007e8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 80007ea:	f107 0113 	add.w	r1, r7, #19
 80007ee:	230a      	movs	r3, #10
 80007f0:	2201      	movs	r2, #1
 80007f2:	4860      	ldr	r0, [pc, #384]	; (8000974 <lcd_init+0x1e8>)
 80007f4:	f003 f90e 	bl	8003a14 <HAL_UART_Transmit>
	HAL_Delay(50);
 80007f8:	2032      	movs	r0, #50	; 0x32
 80007fa:	f000 fc3f 	bl	800107c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80007fe:	f107 0218 	add.w	r2, r7, #24
 8000802:	f241 3388 	movw	r3, #5000	; 0x1388
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	217c      	movs	r1, #124	; 0x7c
 800080c:	69f8      	ldr	r0, [r7, #28]
 800080e:	f000 ff91 	bl	8001734 <HAL_I2C_Master_Transmit>
 8000812:	4603      	mov	r3, r0
 8000814:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000816:	f107 0112 	add.w	r1, r7, #18
 800081a:	230a      	movs	r3, #10
 800081c:	2201      	movs	r2, #1
 800081e:	4855      	ldr	r0, [pc, #340]	; (8000974 <lcd_init+0x1e8>)
 8000820:	f003 f8f8 	bl	8003a14 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f000 fc29 	bl	800107c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800082a:	f107 0218 	add.w	r2, r7, #24
 800082e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	217c      	movs	r1, #124	; 0x7c
 8000838:	69f8      	ldr	r0, [r7, #28]
 800083a:	f000 ff7b 	bl	8001734 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800083e:	2005      	movs	r0, #5
 8000840:	f000 fc1c 	bl	800107c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000844:	f107 0218 	add.w	r2, r7, #24
 8000848:	f241 3388 	movw	r3, #5000	; 0x1388
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2302      	movs	r3, #2
 8000850:	217c      	movs	r1, #124	; 0x7c
 8000852:	69f8      	ldr	r0, [r7, #28]
 8000854:	f000 ff6e 	bl	8001734 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2204      	movs	r2, #4
 800085c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	785b      	ldrb	r3, [r3, #1]
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	b2db      	uxtb	r3, r3
 8000868:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800086a:	f107 0218 	add.w	r2, r7, #24
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2302      	movs	r3, #2
 8000876:	217c      	movs	r1, #124	; 0x7c
 8000878:	69f8      	ldr	r0, [r7, #28]
 800087a:	f000 ff5b 	bl	8001734 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800087e:	2301      	movs	r3, #1
 8000880:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000882:	f107 0218 	add.w	r2, r7, #24
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2302      	movs	r3, #2
 800088e:	217c      	movs	r1, #124	; 0x7c
 8000890:	69f8      	ldr	r0, [r7, #28]
 8000892:	f000 ff4f 	bl	8001734 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000896:	2002      	movs	r0, #2
 8000898:	f000 fbf0 	bl	800107c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	2202      	movs	r2, #2
 80008a0:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	789b      	ldrb	r3, [r3, #2]
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80008ae:	f107 0218 	add.w	r2, r7, #24
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2302      	movs	r3, #2
 80008ba:	217c      	movs	r1, #124	; 0x7c
 80008bc:	69f8      	ldr	r0, [r7, #28]
 80008be:	f000 ff39 	bl	8001734 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008ca:	f107 0210 	add.w	r2, r7, #16
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2302      	movs	r3, #2
 80008d6:	21c4      	movs	r1, #196	; 0xc4
 80008d8:	69f8      	ldr	r0, [r7, #28]
 80008da:	f000 ff2b 	bl	8001734 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80008de:	2308      	movs	r3, #8
 80008e0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 80008e2:	23ff      	movs	r3, #255	; 0xff
 80008e4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80008e6:	f107 0210 	add.w	r2, r7, #16
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2302      	movs	r3, #2
 80008f2:	21c4      	movs	r1, #196	; 0xc4
 80008f4:	69f8      	ldr	r0, [r7, #28]
 80008f6:	f000 ff1d 	bl	8001734 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80008fa:	2301      	movs	r3, #1
 80008fc:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80008fe:	2320      	movs	r3, #32
 8000900:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000902:	f107 0210 	add.w	r2, r7, #16
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2302      	movs	r3, #2
 800090e:	21c4      	movs	r1, #196	; 0xc4
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f000 ff0f 	bl	8001734 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000916:	2304      	movs	r3, #4
 8000918:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800091a:	23ff      	movs	r3, #255	; 0xff
 800091c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2302      	movs	r3, #2
 800092a:	21c4      	movs	r1, #196	; 0xc4
 800092c:	69f8      	ldr	r0, [r7, #28]
 800092e:	f000 ff01 	bl	8001734 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000932:	2303      	movs	r3, #3
 8000934:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000936:	23ff      	movs	r3, #255	; 0xff
 8000938:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2302      	movs	r3, #2
 8000946:	21c4      	movs	r1, #196	; 0xc4
 8000948:	69f8      	ldr	r0, [r7, #28]
 800094a:	f000 fef3 	bl	8001734 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800094e:	2302      	movs	r3, #2
 8000950:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000952:	23ff      	movs	r3, #255	; 0xff
 8000954:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000956:	f107 020c 	add.w	r2, r7, #12
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2302      	movs	r3, #2
 8000962:	21c4      	movs	r1, #196	; 0xc4
 8000964:	69f8      	ldr	r0, [r7, #28]
 8000966:	f000 fee5 	bl	8001734 <HAL_I2C_Master_Transmit>


}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000e4 	.word	0x200000e4

08000978 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af02      	add	r7, sp, #8
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000986:	2340      	movs	r3, #64	; 0x40
 8000988:	733b      	strb	r3, [r7, #12]
    int i=0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800098e:	e011      	b.n	80009b4 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800099a:	f107 020c 	add.w	r2, r7, #12
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2302      	movs	r3, #2
 80009a6:	217c      	movs	r1, #124	; 0x7c
 80009a8:	6938      	ldr	r0, [r7, #16]
 80009aa:	f000 fec3 	bl	8001734 <HAL_I2C_Master_Transmit>
            i++;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1e7      	bne.n	8000990 <lcd_print+0x18>
   }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af02      	add	r7, sp, #8
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	70fb      	strb	r3, [r7, #3]
 80009d6:	4613      	mov	r3, r2
 80009d8:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80009de:	78bb      	ldrb	r3, [r7, #2]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <lcd_position+0x24>
    {
        col = col | 0x80;
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009ea:	70fb      	strb	r3, [r7, #3]
 80009ec:	e003      	b.n	80009f6 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80009f4:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2302      	movs	r3, #2
 8000a0a:	217c      	movs	r1, #124	; 0x7c
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 fe91 	bl	8001734 <HAL_I2C_Master_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b098      	sub	sp, #96	; 0x60
 8000a20:	af02      	add	r7, sp, #8

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  /* USER CODE BEGIN Init */
		HAL_Init();
 8000a22:	f000 faaf 	bl	8000f84 <HAL_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f8f7 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff fdab 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a2e:	f000 f9f3 	bl	8000e18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a32:	f7ff fe0d 	bl	8000650 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

    lcd_init(&hi2c1,&lcdData);
 8000a36:	496b      	ldr	r1, [pc, #428]	; (8000be4 <main+0x1c8>)
 8000a38:	486b      	ldr	r0, [pc, #428]	; (8000be8 <main+0x1cc>)
 8000a3a:	f7ff fea7 	bl	800078c <lcd_init>
    lcd_position(&hi2c1,0,0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	4869      	ldr	r0, [pc, #420]	; (8000be8 <main+0x1cc>)
 8000a44:	f7ff ffc1 	bl	80009ca <lcd_position>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  	  buf[0] = CAPTEUR_CMD_MSB;
 8000a48:	2324      	movs	r3, #36	; 0x24
 8000a4a:	723b      	strb	r3, [r7, #8]
	  	  		buf[1] = CAPTEUR_CMD_LSB;
 8000a4c:	2316      	movs	r3, #22
 8000a4e:	727b      	strb	r3, [r7, #9]
	  	  		ret = HAL_I2C_Master_Transmit( &hi2c1, CAPTEUR_ADRS, buf, 2, HAL_MAX_DELAY);
 8000a50:	2388      	movs	r3, #136	; 0x88
 8000a52:	b299      	uxth	r1, r3
 8000a54:	f107 0208 	add.w	r2, r7, #8
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2302      	movs	r3, #2
 8000a60:	4861      	ldr	r0, [pc, #388]	; (8000be8 <main+0x1cc>)
 8000a62:	f000 fe67 	bl	8001734 <HAL_I2C_Master_Transmit>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  	  		if ( ret != HAL_OK)
 8000a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <main+0x66>
	  	  		{
	  	  			strcpy((char*)buf, "err_T!!\r\n");
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4a5c      	ldr	r2, [pc, #368]	; (8000bec <main+0x1d0>)
 8000a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7c:	c303      	stmia	r3!, {r0, r1}
 8000a7e:	801a      	strh	r2, [r3, #0]
 8000a80:	e09c      	b.n	8000bbc <main+0x1a0>
	  	  		}
	  	  			else
	  	  		{

	  	  		ret = HAL_I2C_Master_Receive( &hi2c1, CAPTEUR_ADRS, buf, 6, HAL_MAX_DELAY);
 8000a82:	2388      	movs	r3, #136	; 0x88
 8000a84:	b299      	uxth	r1, r3
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2306      	movs	r3, #6
 8000a92:	4855      	ldr	r0, [pc, #340]	; (8000be8 <main+0x1cc>)
 8000a94:	f000 ff42 	bl	800191c <HAL_I2C_Master_Receive>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  	  					if ( ret != HAL_OK)
 8000a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <main+0x98>
	  	  				{
	  	  					strcpy((char*)buf, "err_R!!\r\n");
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4a51      	ldr	r2, [pc, #324]	; (8000bf0 <main+0x1d4>)
 8000aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aae:	c303      	stmia	r3!, {r0, r1}
 8000ab0:	801a      	strh	r2, [r3, #0]
 8000ab2:	e083      	b.n	8000bbc <main+0x1a0>
	  	  				}
	  	  		else
	  	  		{

	  	  			valA  =   buf[1] | buf[0] << 8;
 8000ab4:	7a7b      	ldrb	r3, [r7, #9]
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	7a3b      	ldrb	r3, [r7, #8]
 8000aba:	021b      	lsls	r3, r3, #8
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	80fb      	strh	r3, [r7, #6]


	  	  			temperature =  (175 * ( (float)valA / 65535))-45;
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ad2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000bf4 <main+0x1d8>
 8000ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ada:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000bf8 <main+0x1dc>
 8000ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000bfc <main+0x1e0>
 8000ae6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aea:	edc7 7a00 	vstr	s15, [r7]

	  	  			Ent_part = (int) temperature;
 8000aee:	edd7 7a00 	vldr	s15, [r7]
 8000af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000afa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	  	  			Dec_part = temperature;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
	  	  			Dec_part *= 100;
 8000b02:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000b06:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000c00 <main+0x1e4>
 8000b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  	  			Dec_part = Dec_part - (Ent_part * 100);
 8000b12:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000b16:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000c00 <main+0x1e4>
 8000b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b26:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  	  			valA = buf[4] | buf[3] << 8;
 8000b2a:	7b3b      	ldrb	r3, [r7, #12]
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	7afb      	ldrb	r3, [r7, #11]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	80fb      	strh	r3, [r7, #6]

	  	  			umid =  ( 315 *( (float)valA / 65535))-49;
 8000b3c:	88fb      	ldrh	r3, [r7, #6]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b48:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000bf4 <main+0x1d8>
 8000b4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b50:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000c04 <main+0x1e8>
 8000b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b58:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000c08 <main+0x1ec>
 8000b5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b60:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  	  		sprintf(buf,"%u.%u C ; %u %", (unsigned int) Ent_part,(unsigned int) Dec_part,(unsigned int) umid  );
 8000b64:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000b68:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000b6c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000b70:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8000b74:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b7c:	ee17 3a90 	vmov	r3, s15
 8000b80:	f107 0008 	add.w	r0, r7, #8
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	ee16 3a90 	vmov	r3, s13
 8000b8a:	ee17 2a10 	vmov	r2, s14
 8000b8e:	491f      	ldr	r1, [pc, #124]	; (8000c0c <main+0x1f0>)
 8000b90:	f003 fc68 	bl	8004464 <siprintf>
	  	  			  lcd_position(&hi2c1,0,0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <main+0x1cc>)
 8000b9a:	f7ff ff16 	bl	80009ca <lcd_position>
	  	  			  lcd_print(&hi2c1,"Temperature/hum:");
 8000b9e:	491c      	ldr	r1, [pc, #112]	; (8000c10 <main+0x1f4>)
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <main+0x1cc>)
 8000ba2:	f7ff fee9 	bl	8000978 <lcd_print>
	  	  				                  //lcd_position(&hi2c1,7,0);
	  	  					             //lcd_print(&hi2c1,]);
	  	  					            //lcd_position(&hi2c1,7,1);
	  	  					           //lcd_print(&hi2c1,"C*  :  ");
	  	  			 lcd_position(&hi2c1,2,1);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2102      	movs	r1, #2
 8000baa:	480f      	ldr	r0, [pc, #60]	; (8000be8 <main+0x1cc>)
 8000bac:	f7ff ff0d 	bl	80009ca <lcd_position>
	  	  			 lcd_print(&hi2c1,(char*)buf);
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <main+0x1cc>)
 8000bb8:	f7ff fede 	bl	8000978 <lcd_print>

	  	  		}
	  	  		}
	  	  		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb05 	bl	80001d0 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f107 0108 	add.w	r1, r7, #8
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <main+0x1f8>)
 8000bd4:	f002 ff1e 	bl	8003a14 <HAL_UART_Transmit>
	  	  		HAL_Delay(1000);
 8000bd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bdc:	f000 fa4e 	bl	800107c <HAL_Delay>
	  	  buf[0] = CAPTEUR_CMD_MSB;
 8000be0:	e732      	b.n	8000a48 <main+0x2c>
 8000be2:	bf00      	nop
 8000be4:	200000e0 	.word	0x200000e0
 8000be8:	2000008c 	.word	0x2000008c
 8000bec:	08004d74 	.word	0x08004d74
 8000bf0:	08004d80 	.word	0x08004d80
 8000bf4:	477fff00 	.word	0x477fff00
 8000bf8:	432f0000 	.word	0x432f0000
 8000bfc:	42340000 	.word	0x42340000
 8000c00:	42c80000 	.word	0x42c80000
 8000c04:	439d8000 	.word	0x439d8000
 8000c08:	42440000 	.word	0x42440000
 8000c0c:	08004d8c 	.word	0x08004d8c
 8000c10:	08004d9c 	.word	0x08004d9c
 8000c14:	200000e4 	.word	0x200000e4

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b8      	sub	sp, #224	; 0xe0
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c22:	2244      	movs	r2, #68	; 0x44
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fc14 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	2288      	movs	r2, #136	; 0x88
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fc06 	bl	8004454 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c56:	2310      	movs	r3, #16
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c74:	2307      	movs	r3, #7
 8000c76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fbb8 	bl	8002400 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c96:	f000 f836 	bl	8000d06 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 ff7a 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cca:	f000 f81c 	bl	8000d06 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000cce:	2342      	movs	r3, #66	; 0x42
 8000cd0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cda:	463b      	mov	r3, r7
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 f98f 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ce8:	f000 f80d 	bl	8000d06 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf0:	f001 fb30 	bl	8002354 <HAL_PWREx_ControlVoltageScaling>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000cfa:	f000 f804 	bl	8000d06 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	37e0      	adds	r7, #224	; 0xe0
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0a:	b672      	cpsid	i
}
 8000d0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 f94a 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <SystemInit+0x64>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <SystemInit+0x64>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <SystemInit+0x68>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <SystemInit+0x68>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <SystemInit+0x68>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <SystemInit+0x68>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <SystemInit+0x68>)
 8000dd8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ddc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <SystemInit+0x68>)
 8000de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <SystemInit+0x68>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <SystemInit+0x68>)
 8000df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <SystemInit+0x68>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SystemInit+0x64>)
 8000dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e02:	609a      	str	r2, [r3, #8]
#endif
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00
 8000e14:	40021000 	.word	0x40021000

08000e18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <MX_USART2_UART_Init+0x5c>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART2_UART_Init+0x58>)
 8000e5c:	f002 fd8c 	bl	8003978 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e66:	f7ff ff4e 	bl	8000d06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000e4 	.word	0x200000e4
 8000e74:	40004400 	.word	0x40004400

08000e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ac      	sub	sp, #176	; 0xb0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2288      	movs	r2, #136	; 0x88
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fadb 	bl	8004454 <memset>
  if(uartHandle->Instance==USART2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <HAL_UART_MspInit+0xb0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d13b      	bne.n	8000f20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 f8a3 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff ff21 	bl	8000d06 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ece:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_UART_MspInit+0xb4>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 f9b8 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f20:	bf00      	nop
 8000f22:	37b0      	adds	r7, #176	; 0xb0
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f34:	f7ff ff3a 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f003 fa55 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff fd5b 	bl	8000a1c <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f74:	08004e3c 	.word	0x08004e3c
  ldr r2, =_sbss
 8000f78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f7c:	20000180 	.word	0x20000180

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_Init+0x3c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x3c>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f944 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f80f 	bl	8000fc4 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	e001      	b.n	8000fb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb2:	f7ff fead 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d023      	beq.n	8001020 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_InitTick+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f941 	bl	8001276 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f000 f919 	bl	800123e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_InitTick+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e007      	b.n	8001024 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e004      	b.n	8001024 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20000168 	.word	0x20000168

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000168 	.word	0x20000168

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff47 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff5c 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffb0 	bl	80011e4 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e17f      	b.n	80015a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8171 	beq.w	800159a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d118      	bne.n	8001370 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ac 	beq.w	800159a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x242>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <HAL_GPIO_Init+0x338>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_GPIO_Init+0x33c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x340>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x344>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_GPIO_Init+0x348>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_GPIO_Init+0x34c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x22a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014d2:	2300      	movs	r3, #0
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e4:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x350>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae78 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001600:	e002      	b.n	8001608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e081      	b.n	800172a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff f848 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2224      	movs	r2, #36	; 0x24
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001664:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001674:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e006      	b.n	800169c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800169a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d104      	bne.n	80016ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69d9      	ldr	r1, [r3, #28]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	460b      	mov	r3, r1
 8001742:	817b      	strh	r3, [r7, #10]
 8001744:	4613      	mov	r3, r2
 8001746:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b20      	cmp	r3, #32
 8001752:	f040 80da 	bne.w	800190a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_I2C_Master_Transmit+0x30>
 8001760:	2302      	movs	r3, #2
 8001762:	e0d3      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800176c:	f7ff fc7a 	bl	8001064 <HAL_GetTick>
 8001770:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2319      	movs	r3, #25
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 faed 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0be      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2221      	movs	r2, #33	; 0x21
 8001792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2210      	movs	r2, #16
 800179a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	893a      	ldrh	r2, [r7, #8]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d90e      	bls.n	80017de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	22ff      	movs	r2, #255	; 0xff
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	4b51      	ldr	r3, [pc, #324]	; (8001914 <HAL_I2C_Master_Transmit+0x1e0>)
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 fce4 	bl	80021a4 <I2C_TransferConfig>
 80017dc:	e06c      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	8979      	ldrh	r1, [r7, #10]
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_I2C_Master_Transmit+0x1e0>)
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fcd3 	bl	80021a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80017fe:	e05b      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	6a39      	ldr	r1, [r7, #32]
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 faea 	bl	8001dde <I2C_WaitOnTXISFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e07b      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d034      	beq.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	d130      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2200      	movs	r2, #0
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 fa7c 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e04d      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	d90e      	bls.n	8001898 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	2300      	movs	r3, #0
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fc87 	bl	80021a4 <I2C_TransferConfig>
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 fc76 	bl	80021a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d19e      	bne.n	8001800 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fac9 	bl	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e01a      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2220      	movs	r2, #32
 80018dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6859      	ldr	r1, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_I2C_Master_Transmit+0x1e4>)
 80018ea:	400b      	ands	r3, r1
 80018ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
  }
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	80002000 	.word	0x80002000
 8001918:	fe00e800 	.word	0xfe00e800

0800191c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af02      	add	r7, sp, #8
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	461a      	mov	r2, r3
 8001928:	460b      	mov	r3, r1
 800192a:	817b      	strh	r3, [r7, #10]
 800192c:	4613      	mov	r3, r2
 800192e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b20      	cmp	r3, #32
 800193a:	f040 80db 	bne.w	8001af4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_I2C_Master_Receive+0x30>
 8001948:	2302      	movs	r3, #2
 800194a:	e0d4      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001954:	f7ff fb86 	bl	8001064 <HAL_GetTick>
 8001958:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2319      	movs	r3, #25
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f9f9 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0bf      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2222      	movs	r2, #34	; 0x22
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2210      	movs	r2, #16
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	893a      	ldrh	r2, [r7, #8]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	2bff      	cmp	r3, #255	; 0xff
 80019a6:	d90e      	bls.n	80019c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	22ff      	movs	r2, #255	; 0xff
 80019ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	8979      	ldrh	r1, [r7, #10]
 80019b6:	4b52      	ldr	r3, [pc, #328]	; (8001b00 <HAL_I2C_Master_Receive+0x1e4>)
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fbf0 	bl	80021a4 <I2C_TransferConfig>
 80019c4:	e06d      	b.n	8001aa2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	8979      	ldrh	r1, [r7, #10]
 80019d8:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_I2C_Master_Receive+0x1e4>)
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fbdf 	bl	80021a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80019e6:	e05c      	b.n	8001aa2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	6a39      	ldr	r1, [r7, #32]
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fa73 	bl	8001ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e07c      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d034      	beq.n	8001aa2 <HAL_I2C_Master_Receive+0x186>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d130      	bne.n	8001aa2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2200      	movs	r2, #0
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f987 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e04d      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	2bff      	cmp	r3, #255	; 0xff
 8001a62:	d90e      	bls.n	8001a82 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	22ff      	movs	r2, #255	; 0xff
 8001a68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	8979      	ldrh	r1, [r7, #10]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fb92 	bl	80021a4 <I2C_TransferConfig>
 8001a80:	e00f      	b.n	8001aa2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	8979      	ldrh	r1, [r7, #10]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 fb81 	bl	80021a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d19d      	bne.n	80019e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	6a39      	ldr	r1, [r7, #32]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f9d4 	bl	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e01a      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6859      	ldr	r1, [r3, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_I2C_Master_Receive+0x1e8>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	80002400 	.word	0x80002400
 8001b04:	fe00e800 	.word	0xfe00e800

08001b08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	460b      	mov	r3, r1
 8001b16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	f040 80f1 	bne.w	8001d0c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b38:	d101      	bne.n	8001b3e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0e7      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_I2C_IsDeviceReady+0x44>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e0e0      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2224      	movs	r2, #36	; 0x24
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <HAL_I2C_IsDeviceReady+0x72>
 8001b6a:	897b      	ldrh	r3, [r7, #10]
 8001b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b78:	e004      	b.n	8001b84 <HAL_I2C_IsDeviceReady+0x7c>
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b80:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fa6b 	bl	8001064 <HAL_GetTick>
 8001b8e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0320 	and.w	r3, r3, #32
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	bf0c      	ite	eq
 8001b9e:	2301      	moveq	r3, #1
 8001ba0:	2300      	movne	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001bbc:	e034      	b.n	8001c28 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d01a      	beq.n	8001bfc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff fa4d 	bl	8001064 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <HAL_I2C_IsDeviceReady+0xd4>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10f      	bne.n	8001bfc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e088      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_I2C_IsDeviceReady+0x12c>
 8001c2e:	7fbb      	ldrb	r3, [r7, #30]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0c4      	beq.n	8001bbe <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d01a      	beq.n	8001c78 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2120      	movs	r1, #32
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f886 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e058      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2220      	movs	r2, #32
 8001c62:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e04a      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2120      	movs	r1, #32
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f86b 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e03d      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d118      	bne.n	8001cdc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cb8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 f84a 	bl	8001d5e <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e01c      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	f63f af3b 	bhi.w	8001b62 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f043 0220 	orr.w	r2, r3, #32
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d103      	bne.n	8001d34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d007      	beq.n	8001d52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	619a      	str	r2, [r3, #24]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6e:	e022      	b.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d01e      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f974 	bl	8001064 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d113      	bne.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d0cd      	beq.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dea:	e02c      	b.n	8001e46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f8eb 	bl	8001fcc <I2C_IsErrorOccurred>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e02a      	b.n	8001e56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d01e      	beq.n	8001e46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e08:	f7ff f92c 	bl	8001064 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d302      	bcc.n	8001e1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d113      	bne.n	8001e46 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e007      	b.n	8001e56 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d1cb      	bne.n	8001dec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e6a:	e028      	b.n	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f8ab 	bl	8001fcc <I2C_IsErrorOccurred>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e026      	b.n	8001ece <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff f8f0 	bl	8001064 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d113      	bne.n	8001ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e007      	b.n	8001ece <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d1cf      	bne.n	8001e6c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ee4:	e064      	b.n	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f86e 	bl	8001fcc <I2C_IsErrorOccurred>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e062      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d138      	bne.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d105      	bne.n	8001f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e04e      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d107      	bne.n	8001f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f3e:	e002      	b.n	8001f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e022      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff f873 	bl	8001064 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10f      	bne.n	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e007      	b.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d193      	bne.n	8001ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d075      	beq.n	80020e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002000:	e056      	b.n	80020b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d052      	beq.n	80020b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f82b 	bl	8001064 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_IsErrorOccurred+0x54>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d147      	bne.n	80020b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002032:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002042:	d12e      	bne.n	80020a2 <I2C_IsErrorOccurred+0xd6>
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800204a:	d02a      	beq.n	80020a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	2b20      	cmp	r3, #32
 8002050:	d027      	beq.n	80020a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002060:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002062:	f7fe ffff 	bl	8001064 <HAL_GetTick>
 8002066:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002068:	e01b      	b.n	80020a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800206a:	f7fe fffb 	bl	8001064 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b19      	cmp	r3, #25
 8002076:	d914      	bls.n	80020a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b20      	cmp	r3, #32
 80020ae:	d1dc      	bne.n	800206a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d003      	beq.n	80020c6 <I2C_IsErrorOccurred+0xfa>
 80020be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d09d      	beq.n	8002002 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002106:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00b      	beq.n	8002130 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002128:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002156:	2b00      	cmp	r3, #0
 8002158:	d01c      	beq.n	8002194 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f7ff fddb 	bl	8001d16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6859      	ldr	r1, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <I2C_IsErrorOccurred+0x1d4>)
 800216c:	400b      	ands	r3, r1
 800216e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002198:	4618      	mov	r0, r3
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	fe00e800 	.word	0xfe00e800

080021a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	4613      	mov	r3, r2
 80021b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b6:	897b      	ldrh	r3, [r7, #10]
 80021b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021bc:	7a7b      	ldrb	r3, [r7, #9]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	0d5b      	lsrs	r3, r3, #21
 80021de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <I2C_TransferConfig+0x60>)
 80021e4:	430b      	orrs	r3, r1
 80021e6:	43db      	mvns	r3, r3
 80021e8:	ea02 0103 	and.w	r1, r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	03ff63ff 	.word	0x03ff63ff

08002208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	d138      	bne.n	8002290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002228:	2302      	movs	r3, #2
 800222a:	e032      	b.n	8002292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800225a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002290:	2302      	movs	r3, #2
  }
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d139      	bne.n	8002328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022be:	2302      	movs	r3, #2
 80022c0:	e033      	b.n	800232a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2224      	movs	r2, #36	; 0x24
 80022ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_PWREx_GetVoltageRange+0x18>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000

08002354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002362:	d130      	bne.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d038      	beq.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2232      	movs	r2, #50	; 0x32
 8002388:	fb02 f303 	mul.w	r3, r2, r3
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0c9b      	lsrs	r3, r3, #18
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002398:	e002      	b.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3b01      	subs	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ac:	d102      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f2      	bne.n	800239a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b4:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c0:	d110      	bne.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e00f      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d2:	d007      	beq.n	80023e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40007000 	.word	0x40007000
 80023f8:	20000000 	.word	0x20000000
 80023fc:	431bde83 	.word	0x431bde83

08002400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e3ca      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	4b97      	ldr	r3, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241c:	4b94      	ldr	r3, [pc, #592]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80e4 	beq.w	80025fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_RCC_OscConfig+0x4a>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	f040 808b 	bne.w	8002558 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 8087 	bne.w	8002558 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3a2      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <HAL_RCC_OscConfig+0x7c>
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247a:	e005      	b.n	8002488 <HAL_RCC_OscConfig+0x88>
 800247c:	4b7c      	ldr	r3, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002488:	4293      	cmp	r3, r2
 800248a:	d223      	bcs.n	80024d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fd55 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e383      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a0:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	496d      	ldr	r1, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4968      	ldr	r1, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 80024d2:	e025      	b.n	8002520 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d4:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4960      	ldr	r1, [pc, #384]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	495b      	ldr	r1, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd15 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e343      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002520:	f000 fc4a 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4950      	ldr	r1, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800253e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fd3d 	bl	8000fc4 <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d052      	beq.n	80025fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	e327      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d032      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800256c:	f7fe fd7a 	bl	8001064 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002574:	f7fe fd76 	bl	8001064 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e310      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a36      	ldr	r2, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002598:	f043 0308 	orr.w	r3, r3, #8
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4931      	ldr	r1, [pc, #196]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	492c      	ldr	r1, [pc, #176]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	e01a      	b.n	80025fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fd47 	bl	8001064 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025da:	f7fe fd43 	bl	8001064 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e2dd      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x1da>
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d074      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x21a>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d10e      	bne.n	8002632 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d10b      	bne.n	8002632 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d064      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d160      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e2ba      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x24a>
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x298>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002652:	d115      	bne.n	8002680 <HAL_RCC_OscConfig+0x280>
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800265a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x298>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	08004db0 	.word	0x08004db0
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004
 8002680:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a9f      	ldr	r2, [pc, #636]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b9d      	ldr	r3, [pc, #628]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a9c      	ldr	r2, [pc, #624]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fce0 	bl	8001064 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fcdc 	bl	8001064 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e276      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2a8>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fccc 	bl	8001064 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fcc8 	bl	8001064 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e262      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2d0>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d060      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x310>
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d119      	bne.n	800273e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d116      	bne.n	800273e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_OscConfig+0x328>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e23f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	4973      	ldr	r1, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	e040      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d023      	beq.n	800278e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fc87 	bl	8001064 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fc83 	bl	8001064 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e21d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b62      	ldr	r3, [pc, #392]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	495f      	ldr	r1, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fc63 	bl	8001064 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fc5f 	bl	8001064 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1f9      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d03c      	beq.n	8002846 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01c      	beq.n	800280e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fc3e 	bl	8001064 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fc3a 	bl	8001064 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1d4      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ef      	beq.n	80027ec <HAL_RCC_OscConfig+0x3ec>
 800280c:	e01b      	b.n	8002846 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe fc21 	bl	8001064 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe fc1d 	bl	8001064 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1b7      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a6 	beq.w	80029a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	4a26      	ldr	r2, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	; 0x58
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d118      	bne.n	80028be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002898:	f7fe fbe4 	bl	8001064 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe fbe0 	bl	8001064 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e17a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4d8>
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d6:	e029      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d115      	bne.n	800290c <HAL_RCC_OscConfig+0x50c>
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	4b9c      	ldr	r3, [pc, #624]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	4a9b      	ldr	r2, [pc, #620]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291c:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a97      	ldr	r2, [pc, #604]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d016      	beq.n	8002962 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fb96 	bl	8001064 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fb92 	bl	8001064 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e12a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002952:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ed      	beq.n	800293c <HAL_RCC_OscConfig+0x53c>
 8002960:	e015      	b.n	800298e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fb7f 	bl	8001064 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fb7b 	bl	8001064 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e113      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002980:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ed      	bne.n	800296a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80fe 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	f040 80d0 	bne.w	8002b54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029b4:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d130      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	3b01      	subs	r3, #1
 80029d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d127      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d11f      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f4:	2a07      	cmp	r2, #7
 80029f6:	bf14      	ite	ne
 80029f8:	2201      	movne	r2, #1
 80029fa:	2200      	moveq	r2, #0
 80029fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d113      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d06e      	beq.n	8002b08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d069      	beq.n	8002b04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ad      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a58:	f7fe fb04 	bl	8001064 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fb00 	bl	8001064 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e09a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a72:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_RCC_OscConfig+0x784>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a98:	0212      	lsls	r2, r2, #8
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aa0:	0852      	lsrs	r2, r2, #1
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	0552      	lsls	r2, r2, #21
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0652      	lsls	r2, r2, #25
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab8:	0912      	lsrs	r2, r2, #4
 8002aba:	0452      	lsls	r2, r2, #17
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4930      	ldr	r1, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002adc:	f7fe fac2 	bl	8001064 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fabe 	bl	8001064 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e058      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b02:	e050      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d148      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b2c:	f7fe fa9a 	bl	8001064 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fa96 	bl	8001064 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e030      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x734>
 8002b52:	e028      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d023      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fa7d 	bl	8001064 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	e00c      	b.n	8002b88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fa79 	bl	8001064 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d905      	bls.n	8002b88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
 8002b80:	40021000 	.word	0x40021000
 8002b84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ec      	bne.n	8002b6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4905      	ldr	r1, [pc, #20]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_OscConfig+0x7b4>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
 8002ba0:	e001      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	feeefffc 	.word	0xfeeefffc

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0e7      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4970      	ldr	r1, [pc, #448]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cf      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4960      	ldr	r1, [pc, #384]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d04c      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0a6      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d115      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e09a      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6e:	4b4e      	ldr	r3, [pc, #312]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e08e      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e086      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4943      	ldr	r1, [pc, #268]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe f9e0 	bl	8001064 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe f9dc 	bl	8001064 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e06e      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d208      	bcs.n	8002cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	492b      	ldr	r1, [pc, #172]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfe:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d210      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 0207 	bic.w	r2, r3, #7
 8002d14:	4923      	ldr	r1, [pc, #140]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e036      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4910      	ldr	r1, [pc, #64]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d6c:	f000 f824 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	490b      	ldr	r1, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x1f4>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe f917 	bl	8000fc4 <HAL_InitTick>
 8002d96:	4603      	mov	r3, r0
 8002d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	08004db0 	.word	0x08004db0
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d11e      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e005      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e14:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e004      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d134      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xac>
 8002e5c:	e005      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e60:	617b      	str	r3, [r7, #20]
      break;
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e66:	617b      	str	r3, [r7, #20]
      break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	0e5b      	lsrs	r3, r3, #25
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08004dc8 	.word	0x08004dc8
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	08004dc0 	.word	0x08004dc0

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f18:	f7ff ffda 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0adb      	lsrs	r3, r3, #11
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08004dc0 	.word	0x08004dc0

08002f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f9ee 	bl	8002338 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
 8002f5e:	e014      	b.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f9de 	bl	8002338 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d10b      	bne.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d919      	bls.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f9c:	d902      	bls.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e013      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e010      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d902      	bls.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e00a      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d102      	bne.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e004      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b70      	cmp	r3, #112	; 0x70
 8002fc6:	d101      	bne.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc8:	2301      	movs	r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4909      	ldr	r1, [pc, #36]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40022000 	.word	0x40022000

08003000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003008:	2300      	movs	r3, #0
 800300a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800300c:	2300      	movs	r3, #0
 800300e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003018:	2b00      	cmp	r3, #0
 800301a:	d041      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003024:	d02a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302a:	d824      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800302c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003036:	d81e      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800303c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003040:	d010      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003042:	e018      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003044:	4b86      	ldr	r3, [pc, #536]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a85      	ldr	r2, [pc, #532]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003050:	e015      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fabb 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003062:	e00c      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3320      	adds	r3, #32
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fba6 	bl	80037bc <RCCEx_PLLSAI2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	74fb      	strb	r3, [r7, #19]
      break;
 800307a:	e000      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800307c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003092:	4973      	ldr	r1, [pc, #460]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800309a:	e001      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d041      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b4:	d02a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ba:	d824      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c6:	d81e      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d0:	d010      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030d2:	e018      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d4:	4b62      	ldr	r3, [pc, #392]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a61      	ldr	r2, [pc, #388]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e0:	e015      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fa73 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030f2:	e00c      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3320      	adds	r3, #32
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fb5e 	bl	80037bc <RCCEx_PLLSAI2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	74fb      	strb	r3, [r7, #19]
      break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800310c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003114:	4b52      	ldr	r3, [pc, #328]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003122:	494f      	ldr	r1, [pc, #316]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800312a:	e001      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a0 	beq.w	800327e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
 8003164:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003170:	2301      	movs	r3, #1
 8003172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003180:	f7fd ff70 	bl	8001064 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fd ff6c 	bl	8001064 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d902      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	74fb      	strb	r3, [r7, #19]
        break;
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d15c      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d019      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fd ff2b 	bl	8001064 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003210:	e00b      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fd ff27 	bl	8001064 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d902      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	74fb      	strb	r3, [r7, #19]
            break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ec      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003256:	e009      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
 800325c:	e006      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326c:	7c7b      	ldrb	r3, [r7, #17]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4b9e      	ldr	r3, [pc, #632]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4a9d      	ldr	r2, [pc, #628]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800328a:	4b98      	ldr	r3, [pc, #608]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 0203 	bic.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	4994      	ldr	r1, [pc, #592]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ac:	4b8f      	ldr	r3, [pc, #572]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 020c 	bic.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	498c      	ldr	r1, [pc, #560]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ce:	4b87      	ldr	r3, [pc, #540]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4983      	ldr	r1, [pc, #524]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	497b      	ldr	r1, [pc, #492]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	4972      	ldr	r1, [pc, #456]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003334:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	496a      	ldr	r1, [pc, #424]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003356:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	4961      	ldr	r1, [pc, #388]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003378:	4b5c      	ldr	r3, [pc, #368]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	4959      	ldr	r1, [pc, #356]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	4950      	ldr	r1, [pc, #320]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	4948      	ldr	r1, [pc, #288]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	493f      	ldr	r1, [pc, #252]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d028      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341e:	d106      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342a:	60d3      	str	r3, [r2, #12]
 800342c:	e011      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003436:	d10c      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f8c8 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d028      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	491f      	ldr	r1, [pc, #124]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347c:	d106      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003488:	60d3      	str	r3, [r2, #12]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f899 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a02      	ldr	r2, [pc, #8]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
 80034e8:	e014      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f867 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02f      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	4928      	ldr	r1, [pc, #160]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353e:	d10d      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f844 	bl	80035d4 <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
 800355a:	e011      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3320      	adds	r3, #32
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f925 	bl	80037bc <RCCEx_PLLSAI2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359a:	490d      	ldr	r1, [pc, #52]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e2:	4b75      	ldr	r3, [pc, #468]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ee:	4b72      	ldr	r3, [pc, #456]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10d      	bne.n	800361a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
       ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003606:	4b6c      	ldr	r3, [pc, #432]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
       ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d047      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	e044      	b.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d018      	beq.n	800365a <RCCEx_PLLSAI1_Config+0x86>
 8003628:	2b03      	cmp	r3, #3
 800362a:	d825      	bhi.n	8003678 <RCCEx_PLLSAI1_Config+0xa4>
 800362c:	2b01      	cmp	r3, #1
 800362e:	d002      	beq.n	8003636 <RCCEx_PLLSAI1_Config+0x62>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d009      	beq.n	8003648 <RCCEx_PLLSAI1_Config+0x74>
 8003634:	e020      	b.n	8003678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003636:	4b60      	ldr	r3, [pc, #384]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11d      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003646:	e01a      	b.n	800367e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003648:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d116      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003658:	e013      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365a:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003666:	4b54      	ldr	r3, [pc, #336]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003676:	e006      	b.n	8003686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e004      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e002      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003682:	bf00      	nop
 8003684:	e000      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003686:	bf00      	nop
    }

    if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368e:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	430b      	orrs	r3, r1
 80036a4:	4944      	ldr	r1, [pc, #272]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d17d      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd fcd2 	bl	8001064 <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c2:	e009      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c4:	f7fd fcce 	bl	8001064 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d902      	bls.n	80036d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
        break;
 80036d6:	e005      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d8:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ef      	bne.n	80036c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d160      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d111      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6892      	ldr	r2, [r2, #8]
 8003700:	0211      	lsls	r1, r2, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	0912      	lsrs	r2, r2, #4
 8003708:	0452      	lsls	r2, r2, #17
 800370a:	430a      	orrs	r2, r1
 800370c:	492a      	ldr	r1, [pc, #168]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
 8003712:	e027      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d112      	bne.n	8003740 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003722:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	0211      	lsls	r1, r2, #8
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6912      	ldr	r2, [r2, #16]
 8003730:	0852      	lsrs	r2, r2, #1
 8003732:	3a01      	subs	r2, #1
 8003734:	0552      	lsls	r2, r2, #21
 8003736:	430a      	orrs	r2, r1
 8003738:	491f      	ldr	r1, [pc, #124]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
 800373e:	e011      	b.n	8003764 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003748:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6952      	ldr	r2, [r2, #20]
 8003756:	0852      	lsrs	r2, r2, #1
 8003758:	3a01      	subs	r2, #1
 800375a:	0652      	lsls	r2, r2, #25
 800375c:	430a      	orrs	r2, r1
 800375e:	4916      	ldr	r1, [pc, #88]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800376e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fd fc78 	bl	8001064 <HAL_GetTick>
 8003774:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003776:	e009      	b.n	800378c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003778:	f7fd fc74 	bl	8001064 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d902      	bls.n	800378c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	73fb      	strb	r3, [r7, #15]
          break;
 800378a:	e005      	b.n	8003798 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	4904      	ldr	r1, [pc, #16]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ee:	4b61      	ldr	r3, [pc, #388]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d047      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e044      	b.n	8003892 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d018      	beq.n	8003842 <RCCEx_PLLSAI2_Config+0x86>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d825      	bhi.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d002      	beq.n	800381e <RCCEx_PLLSAI2_Config+0x62>
 8003818:	2b02      	cmp	r3, #2
 800381a:	d009      	beq.n	8003830 <RCCEx_PLLSAI2_Config+0x74>
 800381c:	e020      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381e:	4b55      	ldr	r3, [pc, #340]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d11d      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382e:	e01a      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b50      	ldr	r3, [pc, #320]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003840:	e013      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003842:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385e:	e006      	b.n	800386e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e004      	b.n	8003870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e002      	b.n	8003870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800386a:	bf00      	nop
 800386c:	e000      	b.n	8003870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800386e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003876:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	430b      	orrs	r3, r1
 800388c:	4939      	ldr	r1, [pc, #228]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d167      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a35      	ldr	r2, [pc, #212]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a4:	f7fd fbde 	bl	8001064 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038aa:	e009      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ac:	f7fd fbda 	bl	8001064 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d902      	bls.n	80038c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	73fb      	strb	r3, [r7, #15]
        break;
 80038be:	e005      	b.n	80038cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d14a      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d111      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d8:	4b26      	ldr	r3, [pc, #152]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	0211      	lsls	r1, r2, #8
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0912      	lsrs	r2, r2, #4
 80038f0:	0452      	lsls	r2, r2, #17
 80038f2:	430a      	orrs	r2, r1
 80038f4:	491f      	ldr	r1, [pc, #124]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	614b      	str	r3, [r1, #20]
 80038fa:	e011      	b.n	8003920 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6912      	ldr	r2, [r2, #16]
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	0652      	lsls	r2, r2, #25
 8003918:	430a      	orrs	r2, r1
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fb9a 	bl	8001064 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003932:	e009      	b.n	8003948 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003934:	f7fd fb96 	bl	8001064 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	73fb      	strb	r3, [r7, #15]
          break;
 8003946:	e005      	b.n	8003954 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e040      	b.n	8003a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fa6c 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8c0 	bl	8003b3c <UART_SetConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fb6c 	bl	80040ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fbf3 	bl	80041f0 <UART_CheckIdleState>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	f040 8082 	bne.w	8003b32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_UART_Transmit+0x26>
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07a      	b.n	8003b34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_UART_Transmit+0x38>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e073      	b.n	8003b34 <HAL_UART_Transmit+0x120>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2221      	movs	r2, #33	; 0x21
 8003a60:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a62:	f7fd faff 	bl	8001064 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d108      	bne.n	8003a94 <HAL_UART_Transmit+0x80>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e003      	b.n	8003a9c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aa4:	e02d      	b.n	8003b02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fbe6 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e039      	b.n	8003b34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	881a      	ldrh	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3302      	adds	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e008      	b.n	8003af0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1cb      	bne.n	8003aa6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fbb2 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e005      	b.n	8003b34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e000      	b.n	8003b34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
  }
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b08a      	sub	sp, #40	; 0x28
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4ba4      	ldr	r3, [pc, #656]	; (8003dfc <UART_SetConfig+0x2c0>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a99      	ldr	r2, [pc, #612]	; (8003e00 <UART_SetConfig+0x2c4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a90      	ldr	r2, [pc, #576]	; (8003e04 <UART_SetConfig+0x2c8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d126      	bne.n	8003c14 <UART_SetConfig+0xd8>
 8003bc6:	4b90      	ldr	r3, [pc, #576]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d81b      	bhi.n	8003c0c <UART_SetConfig+0xd0>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0xa0>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003c05 	.word	0x08003c05
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e116      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e112      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e10e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c04:	2308      	movs	r3, #8
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e10a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c12:	e106      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7c      	ldr	r2, [pc, #496]	; (8003e0c <UART_SetConfig+0x2d0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d138      	bne.n	8003c90 <UART_SetConfig+0x154>
 8003c1e:	4b7a      	ldr	r3, [pc, #488]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d82d      	bhi.n	8003c88 <UART_SetConfig+0x14c>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0xf8>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c69 	.word	0x08003c69
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	08003c89 	.word	0x08003c89
 8003c40:	08003c89 	.word	0x08003c89
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003c89 	.word	0x08003c89
 8003c4c:	08003c89 	.word	0x08003c89
 8003c50:	08003c89 	.word	0x08003c89
 8003c54:	08003c71 	.word	0x08003c71
 8003c58:	08003c89 	.word	0x08003c89
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08003c89 	.word	0x08003c89
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e0d8      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e0d4      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e0d0      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e0cc      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e0c8      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a5e      	ldr	r2, [pc, #376]	; (8003e10 <UART_SetConfig+0x2d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d125      	bne.n	8003ce6 <UART_SetConfig+0x1aa>
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d016      	beq.n	8003cd6 <UART_SetConfig+0x19a>
 8003ca8:	2b30      	cmp	r3, #48	; 0x30
 8003caa:	d818      	bhi.n	8003cde <UART_SetConfig+0x1a2>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d00a      	beq.n	8003cc6 <UART_SetConfig+0x18a>
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d814      	bhi.n	8003cde <UART_SetConfig+0x1a2>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <UART_SetConfig+0x182>
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d008      	beq.n	8003cce <UART_SetConfig+0x192>
 8003cbc:	e00f      	b.n	8003cde <UART_SetConfig+0x1a2>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc4:	e0ad      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ccc:	e0a9      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd4:	e0a5      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cdc:	e0a1      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003cde:	2310      	movs	r3, #16
 8003ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce4:	e09d      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <UART_SetConfig+0x2d8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d125      	bne.n	8003d3c <UART_SetConfig+0x200>
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003cfc:	d016      	beq.n	8003d2c <UART_SetConfig+0x1f0>
 8003cfe:	2bc0      	cmp	r3, #192	; 0xc0
 8003d00:	d818      	bhi.n	8003d34 <UART_SetConfig+0x1f8>
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d00a      	beq.n	8003d1c <UART_SetConfig+0x1e0>
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x1f8>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <UART_SetConfig+0x1d8>
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d008      	beq.n	8003d24 <UART_SetConfig+0x1e8>
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x1f8>
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e082      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e07e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e07a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e076      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3a:	e072      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <UART_SetConfig+0x2dc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d12a      	bne.n	8003d9c <UART_SetConfig+0x260>
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d54:	d01a      	beq.n	8003d8c <UART_SetConfig+0x250>
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d81b      	bhi.n	8003d94 <UART_SetConfig+0x258>
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d00c      	beq.n	8003d7c <UART_SetConfig+0x240>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d815      	bhi.n	8003d94 <UART_SetConfig+0x258>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <UART_SetConfig+0x238>
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d70:	d008      	beq.n	8003d84 <UART_SetConfig+0x248>
 8003d72:	e00f      	b.n	8003d94 <UART_SetConfig+0x258>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e052      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e04e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d84:	2304      	movs	r3, #4
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e04a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e046      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e042      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <UART_SetConfig+0x2c4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d13a      	bne.n	8003e1c <UART_SetConfig+0x2e0>
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <UART_SetConfig+0x2cc>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db4:	d01a      	beq.n	8003dec <UART_SetConfig+0x2b0>
 8003db6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0x2b8>
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d00c      	beq.n	8003ddc <UART_SetConfig+0x2a0>
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d815      	bhi.n	8003df4 <UART_SetConfig+0x2b8>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <UART_SetConfig+0x298>
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d008      	beq.n	8003de4 <UART_SetConfig+0x2a8>
 8003dd2:	e00f      	b.n	8003df4 <UART_SetConfig+0x2b8>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e022      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e01e      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e01a      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e016      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e012      	b.n	8003e22 <UART_SetConfig+0x2e6>
 8003dfc:	efff69f3 	.word	0xefff69f3
 8003e00:	40008000 	.word	0x40008000
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40004400 	.word	0x40004400
 8003e10:	40004800 	.word	0x40004800
 8003e14:	40004c00 	.word	0x40004c00
 8003e18:	40005000 	.word	0x40005000
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a9f      	ldr	r2, [pc, #636]	; (80040a4 <UART_SetConfig+0x568>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d17a      	bne.n	8003f22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d824      	bhi.n	8003e7e <UART_SetConfig+0x342>
 8003e34:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x300>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e6f 	.word	0x08003e6f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e7f 	.word	0x08003e7f
 8003e5c:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e60:	f7ff f842 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8003e64:	61f8      	str	r0, [r7, #28]
        break;
 8003e66:	e010      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b8f      	ldr	r3, [pc, #572]	; (80040a8 <UART_SetConfig+0x56c>)
 8003e6a:	61fb      	str	r3, [r7, #28]
        break;
 8003e6c:	e00d      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe ffa3 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003e72:	61f8      	str	r0, [r7, #28]
        break;
 8003e74:	e009      	b.n	8003e8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7a:	61fb      	str	r3, [r7, #28]
        break;
 8003e7c:	e005      	b.n	8003e8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80fb 	beq.w	8004088 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d305      	bcc.n	8003eae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d903      	bls.n	8003eb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eb4:	e0e8      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	461c      	mov	r4, r3
 8003ebc:	4615      	mov	r5, r2
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	022b      	lsls	r3, r5, #8
 8003ec8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ecc:	0222      	lsls	r2, r4, #8
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	6849      	ldr	r1, [r1, #4]
 8003ed2:	0849      	lsrs	r1, r1, #1
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	4688      	mov	r8, r1
 8003ed8:	4681      	mov	r9, r0
 8003eda:	eb12 0a08 	adds.w	sl, r2, r8
 8003ede:	eb43 0b09 	adc.w	fp, r3, r9
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef0:	4650      	mov	r0, sl
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	f7fc f9c4 	bl	8000280 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d308      	bcc.n	8003f1a <UART_SetConfig+0x3de>
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d204      	bcs.n	8003f1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	60da      	str	r2, [r3, #12]
 8003f18:	e0b6      	b.n	8004088 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f20:	e0b2      	b.n	8004088 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d15e      	bne.n	8003fea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d828      	bhi.n	8003f86 <UART_SetConfig+0x44a>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x400>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe ffc2 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e014      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7fe ffd4 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	61f8      	str	r0, [r7, #28]
        break;
 8003f6e:	e010      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <UART_SetConfig+0x56c>)
 8003f72:	61fb      	str	r3, [r7, #28]
        break;
 8003f74:	e00d      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe ff1f 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003f7a:	61f8      	str	r0, [r7, #28]
        break;
 8003f7c:	e009      	b.n	8003f92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f82:	61fb      	str	r3, [r7, #28]
        break;
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d077      	beq.n	8004088 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005a      	lsls	r2, r3, #1
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	2b0f      	cmp	r3, #15
 8003fb2:	d916      	bls.n	8003fe2 <UART_SetConfig+0x4a6>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d212      	bcs.n	8003fe2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f023 030f 	bic.w	r3, r3, #15
 8003fc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	8afb      	ldrh	r3, [r7, #22]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	8afa      	ldrh	r2, [r7, #22]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e052      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe8:	e04e      	b.n	8004088 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d827      	bhi.n	8004042 <UART_SetConfig+0x506>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x4bc>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004043 	.word	0x08004043
 8004008:	08004033 	.word	0x08004033
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe ff64 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e014      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fe ff76 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004028:	61f8      	str	r0, [r7, #28]
        break;
 800402a:	e010      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b1e      	ldr	r3, [pc, #120]	; (80040a8 <UART_SetConfig+0x56c>)
 800402e:	61fb      	str	r3, [r7, #28]
        break;
 8004030:	e00d      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fec1 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004036:	61f8      	str	r0, [r7, #28]
        break;
 8004038:	e009      	b.n	800404e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61fb      	str	r3, [r7, #28]
        break;
 8004040:	e005      	b.n	800404e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800404c:	bf00      	nop
    }

    if (pclk != 0U)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d019      	beq.n	8004088 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	085a      	lsrs	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	441a      	add	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d909      	bls.n	8004082 <UART_SetConfig+0x546>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d205      	bcs.n	8004082 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60da      	str	r2, [r3, #12]
 8004080:	e002      	b.n	8004088 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004098:	4618      	mov	r0, r3
 800409a:	3728      	adds	r7, #40	; 0x28
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a2:	bf00      	nop
 80040a4:	40008000 	.word	0x40008000
 80040a8:	00f42400 	.word	0x00f42400

080040ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01a      	beq.n	80041c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041aa:	d10a      	bne.n	80041c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  }
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004200:	f7fc ff30 	bl	8001064 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d10e      	bne.n	8004232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f82d 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e023      	b.n	800427a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b04      	cmp	r3, #4
 800423e:	d10e      	bne.n	800425e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f817 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e00d      	b.n	800427a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b09c      	sub	sp, #112	; 0x70
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	e0a5      	b.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	f000 80a1 	beq.w	80043e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fc fee1 	bl	8001064 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d13e      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c8:	667b      	str	r3, [r7, #100]	; 0x64
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e6      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004306:	64ba      	str	r2, [r7, #72]	; 0x48
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800430c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e5      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e067      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d04f      	beq.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d147      	bne.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004358:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
 800437a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043ac:	623a      	str	r2, [r7, #32]
 80043ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	6a3a      	ldr	r2, [r7, #32]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e010      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	f43f af4a 	beq.w	8004294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3770      	adds	r7, #112	; 0x70
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	; (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	; (8004450 <__libc_init_array+0x44>)
 8004420:	f000 fc9c 	bl	8004d5c <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	08004e34 	.word	0x08004e34
 8004448:	08004e34 	.word	0x08004e34
 800444c:	08004e34 	.word	0x08004e34
 8004450:	08004e38 	.word	0x08004e38

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <siprintf>:
 8004464:	b40e      	push	{r1, r2, r3}
 8004466:	b500      	push	{lr}
 8004468:	b09c      	sub	sp, #112	; 0x70
 800446a:	ab1d      	add	r3, sp, #116	; 0x74
 800446c:	9002      	str	r0, [sp, #8]
 800446e:	9006      	str	r0, [sp, #24]
 8004470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004474:	4809      	ldr	r0, [pc, #36]	; (800449c <siprintf+0x38>)
 8004476:	9107      	str	r1, [sp, #28]
 8004478:	9104      	str	r1, [sp, #16]
 800447a:	4909      	ldr	r1, [pc, #36]	; (80044a0 <siprintf+0x3c>)
 800447c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004480:	9105      	str	r1, [sp, #20]
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	a902      	add	r1, sp, #8
 8004488:	f000 f868 	bl	800455c <_svfiprintf_r>
 800448c:	9b02      	ldr	r3, [sp, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	b01c      	add	sp, #112	; 0x70
 8004494:	f85d eb04 	ldr.w	lr, [sp], #4
 8004498:	b003      	add	sp, #12
 800449a:	4770      	bx	lr
 800449c:	2000000c 	.word	0x2000000c
 80044a0:	ffff0208 	.word	0xffff0208

080044a4 <__ssputs_r>:
 80044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	688e      	ldr	r6, [r1, #8]
 80044aa:	429e      	cmp	r6, r3
 80044ac:	4682      	mov	sl, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	4690      	mov	r8, r2
 80044b2:	461f      	mov	r7, r3
 80044b4:	d838      	bhi.n	8004528 <__ssputs_r+0x84>
 80044b6:	898a      	ldrh	r2, [r1, #12]
 80044b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044bc:	d032      	beq.n	8004524 <__ssputs_r+0x80>
 80044be:	6825      	ldr	r5, [r4, #0]
 80044c0:	6909      	ldr	r1, [r1, #16]
 80044c2:	eba5 0901 	sub.w	r9, r5, r1
 80044c6:	6965      	ldr	r5, [r4, #20]
 80044c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044d0:	3301      	adds	r3, #1
 80044d2:	444b      	add	r3, r9
 80044d4:	106d      	asrs	r5, r5, #1
 80044d6:	429d      	cmp	r5, r3
 80044d8:	bf38      	it	cc
 80044da:	461d      	movcc	r5, r3
 80044dc:	0553      	lsls	r3, r2, #21
 80044de:	d531      	bpl.n	8004544 <__ssputs_r+0xa0>
 80044e0:	4629      	mov	r1, r5
 80044e2:	f000 fb63 	bl	8004bac <_malloc_r>
 80044e6:	4606      	mov	r6, r0
 80044e8:	b950      	cbnz	r0, 8004500 <__ssputs_r+0x5c>
 80044ea:	230c      	movs	r3, #12
 80044ec:	f8ca 3000 	str.w	r3, [sl]
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004500:	6921      	ldr	r1, [r4, #16]
 8004502:	464a      	mov	r2, r9
 8004504:	f000 fabe 	bl	8004a84 <memcpy>
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800450e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004512:	81a3      	strh	r3, [r4, #12]
 8004514:	6126      	str	r6, [r4, #16]
 8004516:	6165      	str	r5, [r4, #20]
 8004518:	444e      	add	r6, r9
 800451a:	eba5 0509 	sub.w	r5, r5, r9
 800451e:	6026      	str	r6, [r4, #0]
 8004520:	60a5      	str	r5, [r4, #8]
 8004522:	463e      	mov	r6, r7
 8004524:	42be      	cmp	r6, r7
 8004526:	d900      	bls.n	800452a <__ssputs_r+0x86>
 8004528:	463e      	mov	r6, r7
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	4632      	mov	r2, r6
 800452e:	4641      	mov	r1, r8
 8004530:	f000 fab6 	bl	8004aa0 <memmove>
 8004534:	68a3      	ldr	r3, [r4, #8]
 8004536:	1b9b      	subs	r3, r3, r6
 8004538:	60a3      	str	r3, [r4, #8]
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4433      	add	r3, r6
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	2000      	movs	r0, #0
 8004542:	e7db      	b.n	80044fc <__ssputs_r+0x58>
 8004544:	462a      	mov	r2, r5
 8004546:	f000 fba5 	bl	8004c94 <_realloc_r>
 800454a:	4606      	mov	r6, r0
 800454c:	2800      	cmp	r0, #0
 800454e:	d1e1      	bne.n	8004514 <__ssputs_r+0x70>
 8004550:	6921      	ldr	r1, [r4, #16]
 8004552:	4650      	mov	r0, sl
 8004554:	f000 fabe 	bl	8004ad4 <_free_r>
 8004558:	e7c7      	b.n	80044ea <__ssputs_r+0x46>
	...

0800455c <_svfiprintf_r>:
 800455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004560:	4698      	mov	r8, r3
 8004562:	898b      	ldrh	r3, [r1, #12]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	b09d      	sub	sp, #116	; 0x74
 8004568:	4607      	mov	r7, r0
 800456a:	460d      	mov	r5, r1
 800456c:	4614      	mov	r4, r2
 800456e:	d50e      	bpl.n	800458e <_svfiprintf_r+0x32>
 8004570:	690b      	ldr	r3, [r1, #16]
 8004572:	b963      	cbnz	r3, 800458e <_svfiprintf_r+0x32>
 8004574:	2140      	movs	r1, #64	; 0x40
 8004576:	f000 fb19 	bl	8004bac <_malloc_r>
 800457a:	6028      	str	r0, [r5, #0]
 800457c:	6128      	str	r0, [r5, #16]
 800457e:	b920      	cbnz	r0, 800458a <_svfiprintf_r+0x2e>
 8004580:	230c      	movs	r3, #12
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e0d1      	b.n	800472e <_svfiprintf_r+0x1d2>
 800458a:	2340      	movs	r3, #64	; 0x40
 800458c:	616b      	str	r3, [r5, #20]
 800458e:	2300      	movs	r3, #0
 8004590:	9309      	str	r3, [sp, #36]	; 0x24
 8004592:	2320      	movs	r3, #32
 8004594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004598:	f8cd 800c 	str.w	r8, [sp, #12]
 800459c:	2330      	movs	r3, #48	; 0x30
 800459e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004748 <_svfiprintf_r+0x1ec>
 80045a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a6:	f04f 0901 	mov.w	r9, #1
 80045aa:	4623      	mov	r3, r4
 80045ac:	469a      	mov	sl, r3
 80045ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045b2:	b10a      	cbz	r2, 80045b8 <_svfiprintf_r+0x5c>
 80045b4:	2a25      	cmp	r2, #37	; 0x25
 80045b6:	d1f9      	bne.n	80045ac <_svfiprintf_r+0x50>
 80045b8:	ebba 0b04 	subs.w	fp, sl, r4
 80045bc:	d00b      	beq.n	80045d6 <_svfiprintf_r+0x7a>
 80045be:	465b      	mov	r3, fp
 80045c0:	4622      	mov	r2, r4
 80045c2:	4629      	mov	r1, r5
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7ff ff6d 	bl	80044a4 <__ssputs_r>
 80045ca:	3001      	adds	r0, #1
 80045cc:	f000 80aa 	beq.w	8004724 <_svfiprintf_r+0x1c8>
 80045d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045d2:	445a      	add	r2, fp
 80045d4:	9209      	str	r2, [sp, #36]	; 0x24
 80045d6:	f89a 3000 	ldrb.w	r3, [sl]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80a2 	beq.w	8004724 <_svfiprintf_r+0x1c8>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295
 80045e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ea:	f10a 0a01 	add.w	sl, sl, #1
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	9307      	str	r3, [sp, #28]
 80045f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f6:	931a      	str	r3, [sp, #104]	; 0x68
 80045f8:	4654      	mov	r4, sl
 80045fa:	2205      	movs	r2, #5
 80045fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004600:	4851      	ldr	r0, [pc, #324]	; (8004748 <_svfiprintf_r+0x1ec>)
 8004602:	f7fb fded 	bl	80001e0 <memchr>
 8004606:	9a04      	ldr	r2, [sp, #16]
 8004608:	b9d8      	cbnz	r0, 8004642 <_svfiprintf_r+0xe6>
 800460a:	06d0      	lsls	r0, r2, #27
 800460c:	bf44      	itt	mi
 800460e:	2320      	movmi	r3, #32
 8004610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004614:	0711      	lsls	r1, r2, #28
 8004616:	bf44      	itt	mi
 8004618:	232b      	movmi	r3, #43	; 0x2b
 800461a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461e:	f89a 3000 	ldrb.w	r3, [sl]
 8004622:	2b2a      	cmp	r3, #42	; 0x2a
 8004624:	d015      	beq.n	8004652 <_svfiprintf_r+0xf6>
 8004626:	9a07      	ldr	r2, [sp, #28]
 8004628:	4654      	mov	r4, sl
 800462a:	2000      	movs	r0, #0
 800462c:	f04f 0c0a 	mov.w	ip, #10
 8004630:	4621      	mov	r1, r4
 8004632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004636:	3b30      	subs	r3, #48	; 0x30
 8004638:	2b09      	cmp	r3, #9
 800463a:	d94e      	bls.n	80046da <_svfiprintf_r+0x17e>
 800463c:	b1b0      	cbz	r0, 800466c <_svfiprintf_r+0x110>
 800463e:	9207      	str	r2, [sp, #28]
 8004640:	e014      	b.n	800466c <_svfiprintf_r+0x110>
 8004642:	eba0 0308 	sub.w	r3, r0, r8
 8004646:	fa09 f303 	lsl.w	r3, r9, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	9304      	str	r3, [sp, #16]
 800464e:	46a2      	mov	sl, r4
 8004650:	e7d2      	b.n	80045f8 <_svfiprintf_r+0x9c>
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	1d19      	adds	r1, r3, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	9103      	str	r1, [sp, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfbb      	ittet	lt
 800465e:	425b      	neglt	r3, r3
 8004660:	f042 0202 	orrlt.w	r2, r2, #2
 8004664:	9307      	strge	r3, [sp, #28]
 8004666:	9307      	strlt	r3, [sp, #28]
 8004668:	bfb8      	it	lt
 800466a:	9204      	strlt	r2, [sp, #16]
 800466c:	7823      	ldrb	r3, [r4, #0]
 800466e:	2b2e      	cmp	r3, #46	; 0x2e
 8004670:	d10c      	bne.n	800468c <_svfiprintf_r+0x130>
 8004672:	7863      	ldrb	r3, [r4, #1]
 8004674:	2b2a      	cmp	r3, #42	; 0x2a
 8004676:	d135      	bne.n	80046e4 <_svfiprintf_r+0x188>
 8004678:	9b03      	ldr	r3, [sp, #12]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	9203      	str	r2, [sp, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	bfb8      	it	lt
 8004684:	f04f 33ff 	movlt.w	r3, #4294967295
 8004688:	3402      	adds	r4, #2
 800468a:	9305      	str	r3, [sp, #20]
 800468c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004758 <_svfiprintf_r+0x1fc>
 8004690:	7821      	ldrb	r1, [r4, #0]
 8004692:	2203      	movs	r2, #3
 8004694:	4650      	mov	r0, sl
 8004696:	f7fb fda3 	bl	80001e0 <memchr>
 800469a:	b140      	cbz	r0, 80046ae <_svfiprintf_r+0x152>
 800469c:	2340      	movs	r3, #64	; 0x40
 800469e:	eba0 000a 	sub.w	r0, r0, sl
 80046a2:	fa03 f000 	lsl.w	r0, r3, r0
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	4303      	orrs	r3, r0
 80046aa:	3401      	adds	r4, #1
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b2:	4826      	ldr	r0, [pc, #152]	; (800474c <_svfiprintf_r+0x1f0>)
 80046b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b8:	2206      	movs	r2, #6
 80046ba:	f7fb fd91 	bl	80001e0 <memchr>
 80046be:	2800      	cmp	r0, #0
 80046c0:	d038      	beq.n	8004734 <_svfiprintf_r+0x1d8>
 80046c2:	4b23      	ldr	r3, [pc, #140]	; (8004750 <_svfiprintf_r+0x1f4>)
 80046c4:	bb1b      	cbnz	r3, 800470e <_svfiprintf_r+0x1b2>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	3307      	adds	r3, #7
 80046ca:	f023 0307 	bic.w	r3, r3, #7
 80046ce:	3308      	adds	r3, #8
 80046d0:	9303      	str	r3, [sp, #12]
 80046d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d4:	4433      	add	r3, r6
 80046d6:	9309      	str	r3, [sp, #36]	; 0x24
 80046d8:	e767      	b.n	80045aa <_svfiprintf_r+0x4e>
 80046da:	fb0c 3202 	mla	r2, ip, r2, r3
 80046de:	460c      	mov	r4, r1
 80046e0:	2001      	movs	r0, #1
 80046e2:	e7a5      	b.n	8004630 <_svfiprintf_r+0xd4>
 80046e4:	2300      	movs	r3, #0
 80046e6:	3401      	adds	r4, #1
 80046e8:	9305      	str	r3, [sp, #20]
 80046ea:	4619      	mov	r1, r3
 80046ec:	f04f 0c0a 	mov.w	ip, #10
 80046f0:	4620      	mov	r0, r4
 80046f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f6:	3a30      	subs	r2, #48	; 0x30
 80046f8:	2a09      	cmp	r2, #9
 80046fa:	d903      	bls.n	8004704 <_svfiprintf_r+0x1a8>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0c5      	beq.n	800468c <_svfiprintf_r+0x130>
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	e7c3      	b.n	800468c <_svfiprintf_r+0x130>
 8004704:	fb0c 2101 	mla	r1, ip, r1, r2
 8004708:	4604      	mov	r4, r0
 800470a:	2301      	movs	r3, #1
 800470c:	e7f0      	b.n	80046f0 <_svfiprintf_r+0x194>
 800470e:	ab03      	add	r3, sp, #12
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	462a      	mov	r2, r5
 8004714:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <_svfiprintf_r+0x1f8>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	4638      	mov	r0, r7
 800471a:	f3af 8000 	nop.w
 800471e:	1c42      	adds	r2, r0, #1
 8004720:	4606      	mov	r6, r0
 8004722:	d1d6      	bne.n	80046d2 <_svfiprintf_r+0x176>
 8004724:	89ab      	ldrh	r3, [r5, #12]
 8004726:	065b      	lsls	r3, r3, #25
 8004728:	f53f af2c 	bmi.w	8004584 <_svfiprintf_r+0x28>
 800472c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472e:	b01d      	add	sp, #116	; 0x74
 8004730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	462a      	mov	r2, r5
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <_svfiprintf_r+0x1f8>)
 800473c:	a904      	add	r1, sp, #16
 800473e:	4638      	mov	r0, r7
 8004740:	f000 f87a 	bl	8004838 <_printf_i>
 8004744:	e7eb      	b.n	800471e <_svfiprintf_r+0x1c2>
 8004746:	bf00      	nop
 8004748:	08004df8 	.word	0x08004df8
 800474c:	08004e02 	.word	0x08004e02
 8004750:	00000000 	.word	0x00000000
 8004754:	080044a5 	.word	0x080044a5
 8004758:	08004dfe 	.word	0x08004dfe

0800475c <_printf_common>:
 800475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	4616      	mov	r6, r2
 8004762:	4699      	mov	r9, r3
 8004764:	688a      	ldr	r2, [r1, #8]
 8004766:	690b      	ldr	r3, [r1, #16]
 8004768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800476c:	4293      	cmp	r3, r2
 800476e:	bfb8      	it	lt
 8004770:	4613      	movlt	r3, r2
 8004772:	6033      	str	r3, [r6, #0]
 8004774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004778:	4607      	mov	r7, r0
 800477a:	460c      	mov	r4, r1
 800477c:	b10a      	cbz	r2, 8004782 <_printf_common+0x26>
 800477e:	3301      	adds	r3, #1
 8004780:	6033      	str	r3, [r6, #0]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	0699      	lsls	r1, r3, #26
 8004786:	bf42      	ittt	mi
 8004788:	6833      	ldrmi	r3, [r6, #0]
 800478a:	3302      	addmi	r3, #2
 800478c:	6033      	strmi	r3, [r6, #0]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d106      	bne.n	80047a4 <_printf_common+0x48>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	6832      	ldr	r2, [r6, #0]
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	42ab      	cmp	r3, r5
 80047a2:	dc26      	bgt.n	80047f2 <_printf_common+0x96>
 80047a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a8:	1e13      	subs	r3, r2, #0
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	0692      	lsls	r2, r2, #26
 80047b2:	d42b      	bmi.n	800480c <_printf_common+0xb0>
 80047b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b8:	4649      	mov	r1, r9
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	3001      	adds	r0, #1
 80047c0:	d01e      	beq.n	8004800 <_printf_common+0xa4>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	68e5      	ldr	r5, [r4, #12]
 80047c6:	6832      	ldr	r2, [r6, #0]
 80047c8:	f003 0306 	and.w	r3, r3, #6
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	bf08      	it	eq
 80047d0:	1aad      	subeq	r5, r5, r2
 80047d2:	68a3      	ldr	r3, [r4, #8]
 80047d4:	6922      	ldr	r2, [r4, #16]
 80047d6:	bf0c      	ite	eq
 80047d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047dc:	2500      	movne	r5, #0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfc4      	itt	gt
 80047e2:	1a9b      	subgt	r3, r3, r2
 80047e4:	18ed      	addgt	r5, r5, r3
 80047e6:	2600      	movs	r6, #0
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xc8>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xa8>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4649      	mov	r1, r9
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c0      	blx	r8
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xac>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c6      	b.n	800479a <_printf_common+0x3e>
 800480c:	18e1      	adds	r1, r4, r3
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	2030      	movs	r0, #48	; 0x30
 8004812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004816:	4422      	add	r2, r4
 8004818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800481c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004820:	3302      	adds	r3, #2
 8004822:	e7c7      	b.n	80047b4 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa4>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x8e>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	7e0f      	ldrb	r7, [r1, #24]
 800483e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004840:	2f78      	cmp	r7, #120	; 0x78
 8004842:	4691      	mov	r9, r2
 8004844:	4680      	mov	r8, r0
 8004846:	460c      	mov	r4, r1
 8004848:	469a      	mov	sl, r3
 800484a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	; 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d8 	beq.w	8004a0a <_printf_i+0x1d2>
 800485a:	2f58      	cmp	r7, #88	; 0x58
 800485c:	f000 80a3 	beq.w	80049a6 <_printf_i+0x16e>
 8004860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a101      	add	r1, pc, #4	; (adr r1, 8004878 <_printf_i+0x40>)
 8004874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049f1 	.word	0x080049f1
 80048a8:	08004915 	.word	0x08004915
 80048ac:	080049d3 	.word	0x080049d3
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a13 	.word	0x08004a13
 80048bc:	08004861 	.word	0x08004861
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049db 	.word	0x080049db
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	602a      	str	r2, [r5, #0]
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0a3      	b.n	8004a2c <_printf_i+0x1f4>
 80048e4:	6820      	ldr	r0, [r4, #0]
 80048e6:	6829      	ldr	r1, [r5, #0]
 80048e8:	0606      	lsls	r6, r0, #24
 80048ea:	f101 0304 	add.w	r3, r1, #4
 80048ee:	d50a      	bpl.n	8004906 <_printf_i+0xce>
 80048f0:	680e      	ldr	r6, [r1, #0]
 80048f2:	602b      	str	r3, [r5, #0]
 80048f4:	2e00      	cmp	r6, #0
 80048f6:	da03      	bge.n	8004900 <_printf_i+0xc8>
 80048f8:	232d      	movs	r3, #45	; 0x2d
 80048fa:	4276      	negs	r6, r6
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	485e      	ldr	r0, [pc, #376]	; (8004a7c <_printf_i+0x244>)
 8004902:	230a      	movs	r3, #10
 8004904:	e019      	b.n	800493a <_printf_i+0x102>
 8004906:	680e      	ldr	r6, [r1, #0]
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800490e:	bf18      	it	ne
 8004910:	b236      	sxthne	r6, r6
 8004912:	e7ef      	b.n	80048f4 <_printf_i+0xbc>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	1d19      	adds	r1, r3, #4
 800491a:	6029      	str	r1, [r5, #0]
 800491c:	0601      	lsls	r1, r0, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xec>
 8004920:	681e      	ldr	r6, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0xf2>
 8004924:	0646      	lsls	r6, r0, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xe8>
 8004928:	881e      	ldrh	r6, [r3, #0]
 800492a:	4854      	ldr	r0, [pc, #336]	; (8004a7c <_printf_i+0x244>)
 800492c:	2f6f      	cmp	r7, #111	; 0x6f
 800492e:	bf0c      	ite	eq
 8004930:	2308      	moveq	r3, #8
 8004932:	230a      	movne	r3, #10
 8004934:	2100      	movs	r1, #0
 8004936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493a:	6865      	ldr	r5, [r4, #4]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	2d00      	cmp	r5, #0
 8004940:	bfa2      	ittt	ge
 8004942:	6821      	ldrge	r1, [r4, #0]
 8004944:	f021 0104 	bicge.w	r1, r1, #4
 8004948:	6021      	strge	r1, [r4, #0]
 800494a:	b90e      	cbnz	r6, 8004950 <_printf_i+0x118>
 800494c:	2d00      	cmp	r5, #0
 800494e:	d04d      	beq.n	80049ec <_printf_i+0x1b4>
 8004950:	4615      	mov	r5, r2
 8004952:	fbb6 f1f3 	udiv	r1, r6, r3
 8004956:	fb03 6711 	mls	r7, r3, r1, r6
 800495a:	5dc7      	ldrb	r7, [r0, r7]
 800495c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004960:	4637      	mov	r7, r6
 8004962:	42bb      	cmp	r3, r7
 8004964:	460e      	mov	r6, r1
 8004966:	d9f4      	bls.n	8004952 <_printf_i+0x11a>
 8004968:	2b08      	cmp	r3, #8
 800496a:	d10b      	bne.n	8004984 <_printf_i+0x14c>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	07de      	lsls	r6, r3, #31
 8004970:	d508      	bpl.n	8004984 <_printf_i+0x14c>
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	6861      	ldr	r1, [r4, #4]
 8004976:	4299      	cmp	r1, r3
 8004978:	bfde      	ittt	le
 800497a:	2330      	movle	r3, #48	; 0x30
 800497c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004984:	1b52      	subs	r2, r2, r5
 8004986:	6122      	str	r2, [r4, #16]
 8004988:	f8cd a000 	str.w	sl, [sp]
 800498c:	464b      	mov	r3, r9
 800498e:	aa03      	add	r2, sp, #12
 8004990:	4621      	mov	r1, r4
 8004992:	4640      	mov	r0, r8
 8004994:	f7ff fee2 	bl	800475c <_printf_common>
 8004998:	3001      	adds	r0, #1
 800499a:	d14c      	bne.n	8004a36 <_printf_i+0x1fe>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b004      	add	sp, #16
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	4835      	ldr	r0, [pc, #212]	; (8004a7c <_printf_i+0x244>)
 80049a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049ac:	6829      	ldr	r1, [r5, #0]
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049b4:	6029      	str	r1, [r5, #0]
 80049b6:	061d      	lsls	r5, r3, #24
 80049b8:	d514      	bpl.n	80049e4 <_printf_i+0x1ac>
 80049ba:	07df      	lsls	r7, r3, #31
 80049bc:	bf44      	itt	mi
 80049be:	f043 0320 	orrmi.w	r3, r3, #32
 80049c2:	6023      	strmi	r3, [r4, #0]
 80049c4:	b91e      	cbnz	r6, 80049ce <_printf_i+0x196>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f023 0320 	bic.w	r3, r3, #32
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	2310      	movs	r3, #16
 80049d0:	e7b0      	b.n	8004934 <_printf_i+0xfc>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f043 0320 	orr.w	r3, r3, #32
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	2378      	movs	r3, #120	; 0x78
 80049dc:	4828      	ldr	r0, [pc, #160]	; (8004a80 <_printf_i+0x248>)
 80049de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049e2:	e7e3      	b.n	80049ac <_printf_i+0x174>
 80049e4:	0659      	lsls	r1, r3, #25
 80049e6:	bf48      	it	mi
 80049e8:	b2b6      	uxthmi	r6, r6
 80049ea:	e7e6      	b.n	80049ba <_printf_i+0x182>
 80049ec:	4615      	mov	r5, r2
 80049ee:	e7bb      	b.n	8004968 <_printf_i+0x130>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	6826      	ldr	r6, [r4, #0]
 80049f4:	6961      	ldr	r1, [r4, #20]
 80049f6:	1d18      	adds	r0, r3, #4
 80049f8:	6028      	str	r0, [r5, #0]
 80049fa:	0635      	lsls	r5, r6, #24
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	d501      	bpl.n	8004a04 <_printf_i+0x1cc>
 8004a00:	6019      	str	r1, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <_printf_i+0x1d2>
 8004a04:	0670      	lsls	r0, r6, #25
 8004a06:	d5fb      	bpl.n	8004a00 <_printf_i+0x1c8>
 8004a08:	8019      	strh	r1, [r3, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6123      	str	r3, [r4, #16]
 8004a0e:	4615      	mov	r5, r2
 8004a10:	e7ba      	b.n	8004988 <_printf_i+0x150>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	602a      	str	r2, [r5, #0]
 8004a18:	681d      	ldr	r5, [r3, #0]
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4628      	mov	r0, r5
 8004a20:	f7fb fbde 	bl	80001e0 <memchr>
 8004a24:	b108      	cbz	r0, 8004a2a <_printf_i+0x1f2>
 8004a26:	1b40      	subs	r0, r0, r5
 8004a28:	6060      	str	r0, [r4, #4]
 8004a2a:	6863      	ldr	r3, [r4, #4]
 8004a2c:	6123      	str	r3, [r4, #16]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a34:	e7a8      	b.n	8004988 <_printf_i+0x150>
 8004a36:	6923      	ldr	r3, [r4, #16]
 8004a38:	462a      	mov	r2, r5
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	47d0      	blx	sl
 8004a40:	3001      	adds	r0, #1
 8004a42:	d0ab      	beq.n	800499c <_printf_i+0x164>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	079b      	lsls	r3, r3, #30
 8004a48:	d413      	bmi.n	8004a72 <_printf_i+0x23a>
 8004a4a:	68e0      	ldr	r0, [r4, #12]
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	4298      	cmp	r0, r3
 8004a50:	bfb8      	it	lt
 8004a52:	4618      	movlt	r0, r3
 8004a54:	e7a4      	b.n	80049a0 <_printf_i+0x168>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	47d0      	blx	sl
 8004a60:	3001      	adds	r0, #1
 8004a62:	d09b      	beq.n	800499c <_printf_i+0x164>
 8004a64:	3501      	adds	r5, #1
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	9903      	ldr	r1, [sp, #12]
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dcf2      	bgt.n	8004a56 <_printf_i+0x21e>
 8004a70:	e7eb      	b.n	8004a4a <_printf_i+0x212>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f104 0619 	add.w	r6, r4, #25
 8004a78:	e7f5      	b.n	8004a66 <_printf_i+0x22e>
 8004a7a:	bf00      	nop
 8004a7c:	08004e09 	.word	0x08004e09
 8004a80:	08004e1a 	.word	0x08004e1a

08004a84 <memcpy>:
 8004a84:	440a      	add	r2, r1
 8004a86:	4291      	cmp	r1, r2
 8004a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a8c:	d100      	bne.n	8004a90 <memcpy+0xc>
 8004a8e:	4770      	bx	lr
 8004a90:	b510      	push	{r4, lr}
 8004a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a9a:	4291      	cmp	r1, r2
 8004a9c:	d1f9      	bne.n	8004a92 <memcpy+0xe>
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <memmove>:
 8004aa0:	4288      	cmp	r0, r1
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	eb01 0402 	add.w	r4, r1, r2
 8004aa8:	d902      	bls.n	8004ab0 <memmove+0x10>
 8004aaa:	4284      	cmp	r4, r0
 8004aac:	4623      	mov	r3, r4
 8004aae:	d807      	bhi.n	8004ac0 <memmove+0x20>
 8004ab0:	1e43      	subs	r3, r0, #1
 8004ab2:	42a1      	cmp	r1, r4
 8004ab4:	d008      	beq.n	8004ac8 <memmove+0x28>
 8004ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004abe:	e7f8      	b.n	8004ab2 <memmove+0x12>
 8004ac0:	4402      	add	r2, r0
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	428a      	cmp	r2, r1
 8004ac6:	d100      	bne.n	8004aca <memmove+0x2a>
 8004ac8:	bd10      	pop	{r4, pc}
 8004aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ad2:	e7f7      	b.n	8004ac4 <memmove+0x24>

08004ad4 <_free_r>:
 8004ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ad6:	2900      	cmp	r1, #0
 8004ad8:	d044      	beq.n	8004b64 <_free_r+0x90>
 8004ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ade:	9001      	str	r0, [sp, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ae6:	bfb8      	it	lt
 8004ae8:	18e4      	addlt	r4, r4, r3
 8004aea:	f000 f913 	bl	8004d14 <__malloc_lock>
 8004aee:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <_free_r+0x94>)
 8004af0:	9801      	ldr	r0, [sp, #4]
 8004af2:	6813      	ldr	r3, [r2, #0]
 8004af4:	b933      	cbnz	r3, 8004b04 <_free_r+0x30>
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	6014      	str	r4, [r2, #0]
 8004afa:	b003      	add	sp, #12
 8004afc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b00:	f000 b90e 	b.w	8004d20 <__malloc_unlock>
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	d908      	bls.n	8004b1a <_free_r+0x46>
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	1961      	adds	r1, r4, r5
 8004b0c:	428b      	cmp	r3, r1
 8004b0e:	bf01      	itttt	eq
 8004b10:	6819      	ldreq	r1, [r3, #0]
 8004b12:	685b      	ldreq	r3, [r3, #4]
 8004b14:	1949      	addeq	r1, r1, r5
 8004b16:	6021      	streq	r1, [r4, #0]
 8004b18:	e7ed      	b.n	8004af6 <_free_r+0x22>
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b10b      	cbz	r3, 8004b24 <_free_r+0x50>
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d9fa      	bls.n	8004b1a <_free_r+0x46>
 8004b24:	6811      	ldr	r1, [r2, #0]
 8004b26:	1855      	adds	r5, r2, r1
 8004b28:	42a5      	cmp	r5, r4
 8004b2a:	d10b      	bne.n	8004b44 <_free_r+0x70>
 8004b2c:	6824      	ldr	r4, [r4, #0]
 8004b2e:	4421      	add	r1, r4
 8004b30:	1854      	adds	r4, r2, r1
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	d1e0      	bne.n	8004afa <_free_r+0x26>
 8004b38:	681c      	ldr	r4, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	6053      	str	r3, [r2, #4]
 8004b3e:	4421      	add	r1, r4
 8004b40:	6011      	str	r1, [r2, #0]
 8004b42:	e7da      	b.n	8004afa <_free_r+0x26>
 8004b44:	d902      	bls.n	8004b4c <_free_r+0x78>
 8004b46:	230c      	movs	r3, #12
 8004b48:	6003      	str	r3, [r0, #0]
 8004b4a:	e7d6      	b.n	8004afa <_free_r+0x26>
 8004b4c:	6825      	ldr	r5, [r4, #0]
 8004b4e:	1961      	adds	r1, r4, r5
 8004b50:	428b      	cmp	r3, r1
 8004b52:	bf04      	itt	eq
 8004b54:	6819      	ldreq	r1, [r3, #0]
 8004b56:	685b      	ldreq	r3, [r3, #4]
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	bf04      	itt	eq
 8004b5c:	1949      	addeq	r1, r1, r5
 8004b5e:	6021      	streq	r1, [r4, #0]
 8004b60:	6054      	str	r4, [r2, #4]
 8004b62:	e7ca      	b.n	8004afa <_free_r+0x26>
 8004b64:	b003      	add	sp, #12
 8004b66:	bd30      	pop	{r4, r5, pc}
 8004b68:	2000016c 	.word	0x2000016c

08004b6c <sbrk_aligned>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4e0e      	ldr	r6, [pc, #56]	; (8004ba8 <sbrk_aligned+0x3c>)
 8004b70:	460c      	mov	r4, r1
 8004b72:	6831      	ldr	r1, [r6, #0]
 8004b74:	4605      	mov	r5, r0
 8004b76:	b911      	cbnz	r1, 8004b7e <sbrk_aligned+0x12>
 8004b78:	f000 f8bc 	bl	8004cf4 <_sbrk_r>
 8004b7c:	6030      	str	r0, [r6, #0]
 8004b7e:	4621      	mov	r1, r4
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 f8b7 	bl	8004cf4 <_sbrk_r>
 8004b86:	1c43      	adds	r3, r0, #1
 8004b88:	d00a      	beq.n	8004ba0 <sbrk_aligned+0x34>
 8004b8a:	1cc4      	adds	r4, r0, #3
 8004b8c:	f024 0403 	bic.w	r4, r4, #3
 8004b90:	42a0      	cmp	r0, r4
 8004b92:	d007      	beq.n	8004ba4 <sbrk_aligned+0x38>
 8004b94:	1a21      	subs	r1, r4, r0
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f8ac 	bl	8004cf4 <_sbrk_r>
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d101      	bne.n	8004ba4 <sbrk_aligned+0x38>
 8004ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	20000170 	.word	0x20000170

08004bac <_malloc_r>:
 8004bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb0:	1ccd      	adds	r5, r1, #3
 8004bb2:	f025 0503 	bic.w	r5, r5, #3
 8004bb6:	3508      	adds	r5, #8
 8004bb8:	2d0c      	cmp	r5, #12
 8004bba:	bf38      	it	cc
 8004bbc:	250c      	movcc	r5, #12
 8004bbe:	2d00      	cmp	r5, #0
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	db01      	blt.n	8004bc8 <_malloc_r+0x1c>
 8004bc4:	42a9      	cmp	r1, r5
 8004bc6:	d905      	bls.n	8004bd4 <_malloc_r+0x28>
 8004bc8:	230c      	movs	r3, #12
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	2600      	movs	r6, #0
 8004bce:	4630      	mov	r0, r6
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd4:	4e2e      	ldr	r6, [pc, #184]	; (8004c90 <_malloc_r+0xe4>)
 8004bd6:	f000 f89d 	bl	8004d14 <__malloc_lock>
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	461c      	mov	r4, r3
 8004bde:	bb34      	cbnz	r4, 8004c2e <_malloc_r+0x82>
 8004be0:	4629      	mov	r1, r5
 8004be2:	4638      	mov	r0, r7
 8004be4:	f7ff ffc2 	bl	8004b6c <sbrk_aligned>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	4604      	mov	r4, r0
 8004bec:	d14d      	bne.n	8004c8a <_malloc_r+0xde>
 8004bee:	6834      	ldr	r4, [r6, #0]
 8004bf0:	4626      	mov	r6, r4
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d140      	bne.n	8004c78 <_malloc_r+0xcc>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	eb04 0803 	add.w	r8, r4, r3
 8004c00:	f000 f878 	bl	8004cf4 <_sbrk_r>
 8004c04:	4580      	cmp	r8, r0
 8004c06:	d13a      	bne.n	8004c7e <_malloc_r+0xd2>
 8004c08:	6821      	ldr	r1, [r4, #0]
 8004c0a:	3503      	adds	r5, #3
 8004c0c:	1a6d      	subs	r5, r5, r1
 8004c0e:	f025 0503 	bic.w	r5, r5, #3
 8004c12:	3508      	adds	r5, #8
 8004c14:	2d0c      	cmp	r5, #12
 8004c16:	bf38      	it	cc
 8004c18:	250c      	movcc	r5, #12
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f7ff ffa5 	bl	8004b6c <sbrk_aligned>
 8004c22:	3001      	adds	r0, #1
 8004c24:	d02b      	beq.n	8004c7e <_malloc_r+0xd2>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	442b      	add	r3, r5
 8004c2a:	6023      	str	r3, [r4, #0]
 8004c2c:	e00e      	b.n	8004c4c <_malloc_r+0xa0>
 8004c2e:	6822      	ldr	r2, [r4, #0]
 8004c30:	1b52      	subs	r2, r2, r5
 8004c32:	d41e      	bmi.n	8004c72 <_malloc_r+0xc6>
 8004c34:	2a0b      	cmp	r2, #11
 8004c36:	d916      	bls.n	8004c66 <_malloc_r+0xba>
 8004c38:	1961      	adds	r1, r4, r5
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	6025      	str	r5, [r4, #0]
 8004c3e:	bf18      	it	ne
 8004c40:	6059      	strne	r1, [r3, #4]
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	bf08      	it	eq
 8004c46:	6031      	streq	r1, [r6, #0]
 8004c48:	5162      	str	r2, [r4, r5]
 8004c4a:	604b      	str	r3, [r1, #4]
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f104 060b 	add.w	r6, r4, #11
 8004c52:	f000 f865 	bl	8004d20 <__malloc_unlock>
 8004c56:	f026 0607 	bic.w	r6, r6, #7
 8004c5a:	1d23      	adds	r3, r4, #4
 8004c5c:	1af2      	subs	r2, r6, r3
 8004c5e:	d0b6      	beq.n	8004bce <_malloc_r+0x22>
 8004c60:	1b9b      	subs	r3, r3, r6
 8004c62:	50a3      	str	r3, [r4, r2]
 8004c64:	e7b3      	b.n	8004bce <_malloc_r+0x22>
 8004c66:	6862      	ldr	r2, [r4, #4]
 8004c68:	42a3      	cmp	r3, r4
 8004c6a:	bf0c      	ite	eq
 8004c6c:	6032      	streq	r2, [r6, #0]
 8004c6e:	605a      	strne	r2, [r3, #4]
 8004c70:	e7ec      	b.n	8004c4c <_malloc_r+0xa0>
 8004c72:	4623      	mov	r3, r4
 8004c74:	6864      	ldr	r4, [r4, #4]
 8004c76:	e7b2      	b.n	8004bde <_malloc_r+0x32>
 8004c78:	4634      	mov	r4, r6
 8004c7a:	6876      	ldr	r6, [r6, #4]
 8004c7c:	e7b9      	b.n	8004bf2 <_malloc_r+0x46>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4638      	mov	r0, r7
 8004c84:	f000 f84c 	bl	8004d20 <__malloc_unlock>
 8004c88:	e7a1      	b.n	8004bce <_malloc_r+0x22>
 8004c8a:	6025      	str	r5, [r4, #0]
 8004c8c:	e7de      	b.n	8004c4c <_malloc_r+0xa0>
 8004c8e:	bf00      	nop
 8004c90:	2000016c 	.word	0x2000016c

08004c94 <_realloc_r>:
 8004c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c98:	4680      	mov	r8, r0
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	460e      	mov	r6, r1
 8004c9e:	b921      	cbnz	r1, 8004caa <_realloc_r+0x16>
 8004ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	f7ff bf81 	b.w	8004bac <_malloc_r>
 8004caa:	b92a      	cbnz	r2, 8004cb8 <_realloc_r+0x24>
 8004cac:	f7ff ff12 	bl	8004ad4 <_free_r>
 8004cb0:	4625      	mov	r5, r4
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	f000 f838 	bl	8004d2c <_malloc_usable_size_r>
 8004cbc:	4284      	cmp	r4, r0
 8004cbe:	4607      	mov	r7, r0
 8004cc0:	d802      	bhi.n	8004cc8 <_realloc_r+0x34>
 8004cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cc6:	d812      	bhi.n	8004cee <_realloc_r+0x5a>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7ff ff6e 	bl	8004bac <_malloc_r>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0ed      	beq.n	8004cb2 <_realloc_r+0x1e>
 8004cd6:	42bc      	cmp	r4, r7
 8004cd8:	4622      	mov	r2, r4
 8004cda:	4631      	mov	r1, r6
 8004cdc:	bf28      	it	cs
 8004cde:	463a      	movcs	r2, r7
 8004ce0:	f7ff fed0 	bl	8004a84 <memcpy>
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	f7ff fef4 	bl	8004ad4 <_free_r>
 8004cec:	e7e1      	b.n	8004cb2 <_realloc_r+0x1e>
 8004cee:	4635      	mov	r5, r6
 8004cf0:	e7df      	b.n	8004cb2 <_realloc_r+0x1e>
	...

08004cf4 <_sbrk_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d06      	ldr	r5, [pc, #24]	; (8004d10 <_sbrk_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f000 f81e 	bl	8004d40 <_sbrk>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_sbrk_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_sbrk_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	20000174 	.word	0x20000174

08004d14 <__malloc_lock>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__malloc_lock+0x8>)
 8004d16:	f000 b811 	b.w	8004d3c <__retarget_lock_acquire_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20000178 	.word	0x20000178

08004d20 <__malloc_unlock>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__malloc_unlock+0x8>)
 8004d22:	f000 b80c 	b.w	8004d3e <__retarget_lock_release_recursive>
 8004d26:	bf00      	nop
 8004d28:	20000178 	.word	0x20000178

08004d2c <_malloc_usable_size_r>:
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f18      	subs	r0, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfbc      	itt	lt
 8004d36:	580b      	ldrlt	r3, [r1, r0]
 8004d38:	18c0      	addlt	r0, r0, r3
 8004d3a:	4770      	bx	lr

08004d3c <__retarget_lock_acquire_recursive>:
 8004d3c:	4770      	bx	lr

08004d3e <__retarget_lock_release_recursive>:
 8004d3e:	4770      	bx	lr

08004d40 <_sbrk>:
 8004d40:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <_sbrk+0x14>)
 8004d42:	6811      	ldr	r1, [r2, #0]
 8004d44:	4603      	mov	r3, r0
 8004d46:	b909      	cbnz	r1, 8004d4c <_sbrk+0xc>
 8004d48:	4903      	ldr	r1, [pc, #12]	; (8004d58 <_sbrk+0x18>)
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	6810      	ldr	r0, [r2, #0]
 8004d4e:	4403      	add	r3, r0
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	4770      	bx	lr
 8004d54:	2000017c 	.word	0x2000017c
 8004d58:	20000180 	.word	0x20000180

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
